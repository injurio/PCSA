Part I: Fork -- Create a new process.

Q1: Consider the program below

#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>

int main() {
  printf("A\n")
  fork();
  printf("B\n");
  return 0;
}

What is the output of the program below? What does 'fork' do?

Ans:

The output of the program is as follows:
A
B
B

'fork' creates a copy of the current process and spawns a new process, where the newly created process is known as the child process and the original process from which 'fork' is called is referred to as the parent process.

-------------------------

Q2: Consider below modification to main(). 

int main() {
  fork();
  printf("A\n");
  fork();
  printf("B\n");
  return 0;
}

What is the output now? How many processes were created?

Ans:

The output of the program is as follows:
A
B
B
A
B
B

Note that the order of the output may varied.

From the given code, 4 processes were created.

-------------------------

Q3: Now try the following.

int main() {
  int x = fork();
  printf("%d\n", x);
  return 0;
}

What is the output? Can you explain meaning of the output numbers.

Ans:

The output of the program is as follows:
0
129849

Note that the order of the output may varied.

More specifically, there should be 2 cases:

First, 
0
n

Second, 
n
0

where n > 0 is a positive integer representing the process ID (PID) of the child process and 0 is a value returned to the child process.

-------------------------

Part II: Wait -- wait for process termination.

Q4: Run the following program 2-3 times:

int main()
{
  for (int i=0;i<5;i++)
    if (fork() == 0) {
      sleep(1); // Pause the process for 1 second
      printf("%d\n", i);
      return 0; // Return here
    }
  printf("Done\n");
  return 0;
}

Do you see the same output every run? Why? Notice how the prompt comes back before the input. Why?

Ans:

No, the output of the program will not be the same every run. This is because the order in which the child processes are executed is not determined, and may vary each time the program is run. Additionally, the 'sleep(1)' call in the child processes causes them to pause for one second, which further contributes to the variability of the program's output.

Also, because the 'printf' statements in the child processes are buffered by the OS, the output is not immediately sent to the console; rather, the output would be stored in a buffer until either the buffer is full or a newline character is encountered. Then, since the child processes in this program print only one integer followed by a newline character, their output is buffered until the newline character is printed. Meanwhile, the parent process continues to execute and may print its own output before the child processes have a chance to flush their output. This causes the prompt to be printed before the child process output.

-------------------------

Q5: Compare the previous program to the following:

int main()
{
  for (int i=0;i<5;i++)
    if (fork() == 0) {
      sleep(1); // Pause the process for 1 second
      printf("%d\n", i);
      return 0; // Return here
    }
  int ret;
  wait(&ret); // Wait here
  printf("Done\n");
  return 0;
}

How did the behavior change? What is the returned value of 'ret'? What does it represent?

Ans:

Since 'wait' is used, the behavior of the program changes so that the the output of the child processes is printed before the program terminates.

Note that the program waits for only one child process to complete, so it's possible for other child processes to continue executing and printing output after the "Done" message is printed.

Also, the returned value of 'ret' is 0 which is a status code that represents the exit status of the child process that terminated first. 

Note the 0 means that the child process exits normally.

-------------------------

Q6: Now consider the following program.

int main()
{
 for (int i=0;i<5;i++)
   if (fork() == 0) {
     sleep(1); // Pause the process for 1 second
     printf("%d\n", i);
     return 0; // Return here
   }
 int ret;
 for (int i=0;i<5;i++) {
   wait(&ret);
 }
 printf("Done\n");
 return 0;
}

How does the program behave this time? 

Ans:

The program behaves similarly to the previous one. However, the parent process now waits for all 5 child processes to complete instead of waiting for just one child process. This, therefore, ensures that all child process output is printed before the "Done" message is printed.

